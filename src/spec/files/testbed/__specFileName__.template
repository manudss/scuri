<% let callParam; %>
<% params.forEach(p => { if(p.importPath) {%>import { <%= p.type %> } from '<%= p.importPath %>';
<% }}) %>import { <%= className %> } from './<%= normalizedName %>';
import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { autoSpy } from 'autoSpy';
import { stringify } from 'querystring'

/**
 * Test the <%= className %> with test Bed -
 */
describe('<%= className %>: ', () => {

    describe('Test all class method :', () => {  

        let build, builder, component: <%= className %>;

        beforeEach(() => {
            // GIVEN - 
            builder = setup().default();
            build = builder.build;
            component = build();
        });   

        <% methods.forEach(meth=> { %>describe('when "<%= meth.name %>()" is called', () => {
            <% callParam = meth.params.map((param) => param.name).join(', '); %>

            <% if (meth.hasReturn) { %>
            let actualValue: <%= meth.returnType %>, expectedValue: <%= meth.returnType %>;
            <% } %>
                
             <% meth.params.forEach(param => { %>let <%= param.name %>: <%= param.type %>;
                <% }); %>

            beforeEach(() => {
                // GIVEN - 
                // builder.SERVICE.and.callThrought();
                // builder.SERVICE.and.return({});
               
            }); 

            describe('it should', () => {                 

                <% if (meth.hasReturn) { %>
                it('Return VALUE', () => {
                    // GIVEN 
                    <% meth.params.forEach(param => { %><%= param.name %> = <%= param.defaultValue %>;
                        <% }); %>

                    // WHEN - act
                    actualValue = component.<%= meth.name %>(<%= callParam %>);

                    // THEN - assert
                    expectedValue = null;
                    expect(actualValue).toEqual(expectedValue);
                    // expect(builder.SERVICE).toHaveBeenCalled();
                });
                <% } else { %>
                    it('DO ...', () => {
                        // GIVEN
                        <% meth.params.forEach(param => { %><%= param.name %> = <%= param.defaultValue %>;
                            <% }); %>

                        // WHEN - act
                        component.<%= meth.name %>(<%= callParam %>);

                        // THEN - assert
                        // expect(builder.SERVICE).toHaveBeenCalled();
                    });

                <% }  %>



                /** 
                * Add more test about method <%= meth.name %>
                **/
            }); // END - <%= meth.name %> it should 

            describe('it should failed', () => { 
        
                it('When given VALUE', () => {
                    // GIVEN 
                     <% meth.params.forEach(param => { %>
                        <%= param.name %> = null; 
                    <% }); %>

                    // WHEN - act                    
                    actualValue = component.<%= meth.name %>(<%= callParam %>);

                    // THEN - assert
                    // expectedValue = {};
                    // expect(actualValue).toEqual(expectedValue);
                    // expect(builder.SERVICE).not.toHaveBeenCalled();
                });

                /** 
                * Add more test about method <%= meth.name %> when failed 
                **/
            }); // END - <%= meth.name %> it should failed
           
        }); // END - test <%= meth.name %> 

        <% }) %>
    }); // END - test all class method 

     describe('Test with the dom :', () => {

        let compile, builder, component: <%= className %>

        beforeEach(() => {
            // GIVEN - 
            builder = setup().compile();
            compile = builder.compile;
        });

         beforeEach(() => {
            // WHEN -             
            component = compile();
        });

        it('should create', () => {
            // THEN - assert
            expect(component).toBeTruthy();
        }); 

        /**
        * Test here your DOM component
        */
        
    }); // END - Test with the dom
}); // END - test 

/**
* Setup the test, will autospy all provider 
**/
function setup() {
  <%= declaration %>
    let component: <%= className %>;
    let fixture: ComponentFixture<<%= className %>>;
  const builder = {
    <%= builderExports %>
    component,
    fixture,
    /** 
    * Confirure class, to juste create class without Domm, usefull for test class methode
    */ 
    default() {
        TestBed.configureTestingModule({
            providers: [<%= className %><% if (provider) {%>, <%= provider %><% } %>]
        });

      return builder;
    },
    /**
    * Build class to run without DOM. Will call ngOnInit if exist  
    */ 
    build() {
        component = TestBed.get(<%= className %>);

        // @ts-ignore If it is a component call the ng Init before
        if (component.ngOnInit) { component.ngOnInit();   }
        return component;
    },
    /** 
    * Configure component, and compile it with DOM, usefull for test with DOM 
    **/ 
    compile() {
        TestBed.configureTestingModule({
            declarations: [<%= className %>],
            providers: [<%= provider %>]
        }).compileComponents();

      return builder;
    },
    /** 
    * Create component, with DOM supports
    **/     
    create() {
        fixture = TestBed.createComponent(<%= className %>);
        component = fixture.componentInstance;
        fixture.detectChanges();

        return component;
    },
  };

  return builder;
}
